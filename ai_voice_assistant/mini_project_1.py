# -*- coding: utf-8 -*-
"""Mini_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B-ldpRmMASDE7-y5lNtJF5jcXWX6aIr7
"""

from dependency_assets import *
from youtube import *
from google import *
from notepad import *
from gmail import *
from system_operations import *
from meet import *

r=sr.Recognizer()
engine=pyttsx3.init()
engine.setProperty('rate', 170)
engine.setProperty('voice', engine.getProperty('voices')[1].id)

#commands=["youtube","spotify","google","whatsapp","notepad","gmail","outlook","meet","teams","power off","restart","shut down","weather","temperature","joke","volume up","volume down","increase volume","decrease volume","mute","increase brightness","increase the brightness","decrease brightness","decrease the brightness"]+"what,how,when,why,which,who".split(",")+["what,how,when,why,which,who"]

COMMANDS={
	"youtube": youtube_search,
	"google": google_search,
	"spotify": None,
	"whatsapp": None,
	"notepad": write_text_in_notepad,
	"gmail": use_gmail,
	"outlook": None,
	"meet": open_google_meet,
	"teams": None,
	"power off,shut down": power_off,
	"restart": restart,
	"weather,temperature": weather,
	"joke": joke,
	"volume,mute": adjust_volume,
	"brightness": adjust_brightness,
	"what,how,when,why,which,who": wolframalpha_response
}


def verify_file_name(text):
	say(f"is it {text}?",engine)

	with sr.Microphone as source:
		r.adjust_for_ambient_noise(source)
		audio=r.listen(source)

		while True:
			response=r.recognize_google(audio,language = 'en-IN', show_all = True)['alternative'][0]['transcript'].lower()
			if response=="":
				continue

			if "yes" in response:
				return True
			else:
				return False 


def verify_name():
	with sr.Microphone() as source:
		r.adjust_for_ambient_noise(source)
		audio=r.listen(source)

		try:
			print(11)
			text=r.recognize_google(audio,language = 'en-IN', show_all = True)['alternative'][0]['transcript']
			return text.lower()
		except:
			return -1

def get_name():
	with sr.Microphone() as source:
		r.adjust_for_ambient_noise(source)
		audio=r.listen(source)

		try:
			print(22)
			text=r.recognize_google(audio,language = 'en-IN', show_all = True)['alternative'][0]['transcript']
			return text
		except:
			return -1

def main():
	#say("Hi, My Name is Jarvis and I will be your voice assistant")
	#say("How may I address you?")
	user_name,flag="Arbaz",False
	while flag:
		user_name=get_name()
		if "int" in str(type(user_name)) or user_name=="":
			print(user_name)
			audio_unrecognized()
		else:
			user_name=user_name.split()[-1]
			print(user_name)
			engine.say(f"Is it, {user_name}?")
			engine.runAndWait()

			res=-1
			while res==-1:
				res=verify_name()
				while "str" not in str(type(res)):
					say("Please confirm it again")
					res=verify_name()
					print(res)

			flag=False if "yes" in res else True

			if flag:
				say("Could you please say your name, again?")



	#say(f"Hello, {user_name}. Nice to meet you",engine)
	#say("How may I help you?",engine)
	while True:
		with sr.Microphone() as source:
			print(2323,source)
			r.adjust_for_ambient_noise(source)
			print(2323)
			audio=r.listen(source)
			print(2323)
			#text=r.recognize_sphinx(audio,language = 'en-IN', show_all = True)['alternative'][0]['transcript'].lower()
			print(33)
			text=r.recognize_google(audio,language = 'en-IN', show_all = True)
			print(text)
			text=text['alternative'][0]['transcript'].lower()

			fn=None
			for phrase in COMMANDS:
				if any(word in text for word in phrase.split(",")) and (phrase!="google" or "meet" not in text):
					fn=COMMANDS[phrase]
					break

			"""if command_for!=-1:
				say(f"Your command has been recognized for {command_for}")

				if command_for ==  "google":
						print("Going to func")
						google_search(text,engine,r)
					elif command_for == "youtube":
						youtube_search(text,engine,r)
					elif command_for == "notepad":
						write_text_in_notepad(text,engine,r)
					elif command_for == "gmail":
						use_gmail(text,engine,r)
					if command_for in commands[-1]:
						ans=next(client.query(text).results).text
						say(ans,engine)"""

			if fn is not None:
				fn(text,engine,r)
				print("Command executed succesfully, Is there anything else I can help you out with?")
			else:
				say("Couldn't recognize your command",engine)
			#except:
			#	pass

			




if __name__=="__main__":
	#sel_dri()
	#youtube_search("youtube doctor strange multiverse of madness trailer",engine,r)
	#google_search("google doctor strange multiverse of madness trailer",engine,r)
	#use_gmail(text,engine,r)
	main()
	#open_google_meet("",engine,r)
